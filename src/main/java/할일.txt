새 환경에서는
sts 설치(java 설치안됬으면 설치)
DB설치


이벤트 페이지 생성 : 이건 담당자가 그때그때만드는거니깐..
사진 저장 클라우드로 변경 : 저장할 방법, 가져올 방법..그리고 관리방법 생각
관리자가 주문번호로 배송조회-환불요청시 할 수 있도록, 회수중으로 바꿀 수 있도록, 회수요청은 구매자가 해야되니
관리자가 구매 못하도록 해놓기.
인기상품 구현-조회수 구매기록 방문기록 이용->가능하면 데이터관련 해보고싶은데
포인트나 쿠폰 : 개인별로 생성하는데 가능하면 테이블 분리하자...유저정보, 개인정보, 포인트 쿠폰정보.

회전배너에 이벤트페이지 링크 넣기 : 이건 바로 가능하니 시간날때



일정 시간마다 초기화 : 로그나 데이터 쌓이면 부담되니 저장할 로그 저장하고 일정시간마다 초기화하도록하면...

최종 로그인 일자 기록하고 마지막 로그인 이후 1년이상 지났다면 DB옮기고, 계정보호중으로 변경, 로그인시도하면 보호중이고 추가 인증을 통해 해제
계정잠그기도 생각해야...로그인 시도 일정수 이상 실패, 부정한 움직임의 계정 멈추도록?
 
디자인개선 : 현재 디자인 너무 대충임 개선 필요, 모바일 버전도 생각해야
DB개선 : 분리나 통합 필요
코드 개선 : DB에 간섭하는게 너무 뒤죽박죽, 개인정보 등 암호화 필요


보안로그저장하도록 : 로그인 시도, 개인정보 변경, 권한 변경

로그인 시도: 성공적이거나 실패한 로그인 시도 기록. 이를 통해 비정상적인 로그인 패턴을 감지할 수 있습니다.
사용자 활동: 특정 사용자 계정의 행동(예: 파일 접근, 설정 변경 등)을 기록하여 비정상적인 활동을 감지합니다.
권한 변경: 사용자 권한이 추가되거나 제거된 경우 기록합니다. 이로 인해 권한 상승 공격을 탐지할 수 있습니다.
시스템 접근: 서버나 애플리케이션에 대한 접근 기록. 의심스러운 IP 주소나 접근 시도를 모니터링합니다.
https://velog.io/@whibiy/Java-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-IP-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0
데이터 변경: 중요한 데이터가 변경되었을 때 기록합니다. 이로 인해 무단 접근이나 데이터 유출을 추적할 수 있습니다.

인터셉터를 사용하여 보안 로그를 저장하는 것은 매우 효과적인 방법입니다. 요청을 가로채어 보안 관련 정보를 기록할 수 있으므로, 다음과 같은 작업을 수행할 수 있습니다:

1. 요청 로깅
인터셉터를 사용하여 사용자 인증 상태, 요청 URL, 요청 시간, IP 주소 등을 기록할 수 있습니다.

2. 예외 처리
로그인 실패와 같은 특정 보안 이벤트를 기록하고, 필요할 경우 추가적인 조치를 취할 수 있습니다.

3. 접근 제어
사용자의 권한을 검사하고, 권한이 없는 요청을 차단하거나 경고 로그를 남길 수 있습니다.

예제 (Java Spring)
1. 인터셉터 클래스 생성
java
코드 복사
import org.springframework.web.servlet.HandlerInterceptor;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class SecurityLogInterceptor implements HandlerInterceptor {
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {
        // 요청 정보 로깅
        String ipAddress = request.getRemoteAddr();
        String requestUrl = request.getRequestURI();
        String method = request.getMethod();
        
        System.out.println("IP: " + ipAddress + ", Request URL: " + requestUrl + ", Method: " + method);

        // 추가적인 보안 검사 로직 (예: 인증 체크)
        // if (!isUserAuthenticated()) {
        //     // 로그 기록 및 차단
        //     System.out.println("Unauthorized access attempt to: " + requestUrl);
        //     response.sendError(HttpServletResponse.SC_UNAUTHORIZED);
        //     return false; // 요청 차단
        // }
        
        return true; // 요청을 계속 진행
    }
}
2. 인터셉터 등록
java
코드 복사
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {
    @Autowired
    private SecurityLogInterceptor securityLogInterceptor;

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(securityLogInterceptor)
                .addPathPatterns("/**"); // 모든 경로에 대해 인터셉터 적용
    }
}
보안 로그 저장 방법
로그를 파일이나 데이터베이스에 저장하려면, 로깅 라이브러리(예: Log4j, SLF4J 등)를 사용하는 것이 좋습니다. 로그 레벨과 형식을 설정하여 필요한 정보만 기록하도록 구성할 수 있습니다.

요약
인터셉터를 통해 보안 로그를 저장하는 것은 효과적인 방법으로, 요청의 모든 측면을 기록하고 보안 사고를 추적하는 데 큰 도움이 됩니다.

---

취약점 관련 개선

웹 개발 시 취약점을 최소화하기 위해 주의해야 할 몇 가지 중요한 사항은 다음과 같습니다:

1. 입력 검증 (검색이나 로그인 회원가입시 좀더 검증하도록 변경하기)
유효성 검사: 사용자 입력을 항상 검증하여 악의적인 데이터가 시스템에 들어오지 않도록 합니다.
화이트리스트 사용: 허용된 값만 수용하는 화이트리스트 방식을 적용합니다.

2. 인증 및 권한 관리 (일정 기간마다 변경권고 설정 필요, 추가 인증수단 검토)
강력한 비밀번호 정책: 비밀번호는 복잡하고 충분히 긴 형태로 설정해야 하며, 정기적으로 변경하도록 합니다.
다중 인증(MFA): 추가적인 인증 수단을 도입하여 보안을 강화합니다.
세션 관리: 세션 타임아웃을 설정하고, 세션 하이재킹 방지를 위한 조치를 취합니다.

3. 데이터 보호 (https 체험가능한지 알아보기)
민감 데이터 암호화: 사용자 정보나 금융 정보와 같은 민감한 데이터는 항상 암호화하여 저장해야 합니다.
HTTPS 사용: 모든 데이터 전송은 HTTPS를 통해 안전하게 암호화합니다.

4. XSS(교차 사이트 스크립팅) 방지 (찾아보자)
출력 인코딩: HTML, JavaScript, URL 등 출력 시 적절히 인코딩하여 XSS 공격을 방지합니다.
Content Security Policy(CSP): CSP를 설정하여 외부 스크립트의 실행을 제한합니다.
https://velog.io/@huisso/XSS%ED%81%AC%EB%A1%9C%EC%8A%A4-%EC%82%AC%EC%9D%B4%ED%8A%B8-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8C%85

5. CSRF(교차 사이트 요청 위조) 방지  (*하고있음)
CSRF 토큰: 모든 상태 변경 요청에 CSRF 토큰을 추가하여 유효성을 검증합니다.  

6. 오류 처리 (에러페이지 생성하자)
민감한 정보 노출 금지: 에러 메시지에 시스템 정보나 스택 트레이스가 포함되지 않도록 주의합니다.
사용자 친화적 에러 페이지: 사용자가 이해할 수 있는 오류 메시지를 제공하고, 자세한 정보는 숨깁니다.

7. 의존성 관리 (이건 자동화 가능한지 도구 찾기)
정기적인 업데이트: 사용하고 있는 라이브러리와 프레임워크의 보안 패치를 주기적으로 확인하고 업데이트합니다.
의존성 스캐닝: 보안 취약점이 있는 라이브러리를 탐지하기 위해 도구를 사용합니다.

8. 보안 테스트 (취약점 관련 추가 개선사항 확인)
정기적인 보안 감사: 코드 리뷰와 보안 감사를 통해 취약점을 식별하고 수정합니다.
자동화된 보안 도구 사용: SAST(정적 애플리케이션 보안 테스트)와 DAST(동적 애플리케이션 보안 테스트) 도구를 활용하여 취약점을 사전에 발견합니다.
이와 같은 방식을 통해 웹 애플리케이션의 보안을 강화하고 취약점을 줄일 수 있습니다. 보안은 개발 프로세스의 모든 단계에서 고려되어야 합니다.





