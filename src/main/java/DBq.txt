-- =========================
-- DB 초기화
-- =========================
DROP DATABASE IF EXISTS jsp_sb_project;
CREATE DATABASE jsp_sb_project
  DEFAULT CHARACTER SET utf8mb4
  DEFAULT COLLATE utf8mb4_0900_ai_ci;
USE jsp_sb_project;

-- =========================
-- 세션 인코딩 (한글 안전)
-- =========================
SET NAMES utf8mb4;
SET CHARACTER SET utf8mb4;
SET collation_connection = utf8mb4_0900_ai_ci;
SET time_zone = '+09:00';

-- =========================
-- 테이블 생성 (순서 주의: FK 참조 대상 먼저)
-- =========================

CREATE TABLE `user` (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    regDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    userid VARCHAR(60) NOT NULL UNIQUE,
    userpw VARCHAR(255),
    `name` VARCHAR(60) NOT NULL,
    email VARCHAR(60) NOT NULL UNIQUE,
    `class` INT NOT NULL,
    address VARCHAR(60),
    INDEX idx_user_userid (userid)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

CREATE TABLE `admin` (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    regDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    adminid VARCHAR(60) NOT NULL UNIQUE,
    adminpw VARCHAR(255) NOT NULL,
    `name` VARCHAR(60) NOT NULL,
    email VARCHAR(60) NOT NULL UNIQUE,
    adminclass INT NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

CREATE TABLE product (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    writer VARCHAR(60) NOT NULL,
    `name` VARCHAR(255) NOT NULL,
    price INT NOT NULL,
    `description` VARCHAR(255) NOT NULL,
    imageUrl VARCHAR(255),
    `count` INT NOT NULL,
    category VARCHAR(255) NOT NULL,
    maker VARCHAR(255) NOT NULL,
    color VARCHAR(255) NOT NULL,
    size VARCHAR(255) NOT NULL,
    additionalOptions VARCHAR(255) DEFAULT NULL,
    regDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    viewcount INT UNSIGNED NOT NULL DEFAULT 0,
    INDEX idx_product_category (category),
    INDEX idx_product_name (name)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

CREATE TABLE article (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    body TEXT NOT NULL,
    writer_id VARCHAR(60) NOT NULL,             -- user.userid 참조
    reg_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    update_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    viewcount INT UNSIGNED NOT NULL DEFAULT 0,
    CONSTRAINT fk_article_userid
      FOREIGN KEY (writer_id) REFERENCES `user`(userid)
      ON UPDATE CASCADE ON DELETE RESTRICT,
    INDEX idx_article_writer (writer_id),
    INDEX idx_article_regdate (reg_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

CREATE TABLE review (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    productid INT UNSIGNED NOT NULL,
    writer VARCHAR(60) NOT NULL,                -- user.userid 저장 권장
    regDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    reviewtext TEXT NOT NULL,
    star DOUBLE UNSIGNED NOT NULL,
    CONSTRAINT fk_review_product
      FOREIGN KEY (productid) REFERENCES product(id)
      ON UPDATE CASCADE ON DELETE CASCADE,
    INDEX idx_review_product (productid),
    INDEX idx_review_writer (writer)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

CREATE TABLE cart (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    userid VARCHAR(60) NOT NULL,
    productid INT UNSIGNED NOT NULL,
    productname VARCHAR(255) NOT NULL,
    color VARCHAR(255) NOT NULL,
    size VARCHAR(255) NOT NULL,
    `count` INT NOT NULL,
    price INT NOT NULL,
    priceall INT AS (price * `count`) STORED,
    CONSTRAINT fk_cart_userid
      FOREIGN KEY (userid) REFERENCES `user`(userid)
      ON UPDATE CASCADE ON DELETE CASCADE,
    CONSTRAINT fk_cart_product
      FOREIGN KEY (productid) REFERENCES product(id)
      ON UPDATE CASCADE ON DELETE CASCADE,
    INDEX idx_cart_user (userid),
    INDEX idx_cart_product (productid)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- 주문/결제
CREATE TABLE PurchaseRecords (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    order_number VARCHAR(255) NOT NULL UNIQUE,
    userid VARCHAR(60),
    cartids VARCHAR(255),
    product_id INT UNSIGNED,
    productids VARCHAR(255),
    productname VARCHAR(255),
    quantity INT UNSIGNED NOT NULL,
    optionin VARCHAR(255),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(50) NOT NULL DEFAULT _utf8mb4'배송 전' COLLATE utf8mb4_0900_ai_ci,
    CONSTRAINT fk_purchase_userid
      FOREIGN KEY (userid) REFERENCES `user`(userid)
      ON UPDATE CASCADE ON DELETE SET NULL,
    CONSTRAINT fk_purchase_product
      FOREIGN KEY (product_id) REFERENCES product(id)
      ON UPDATE CASCADE ON DELETE SET NULL,
    INDEX idx_purchase_created (created_at),
    INDEX idx_purchase_user (userid)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

CREATE TABLE GuestPurchaseRecords (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    order_number VARCHAR(255) NOT NULL UNIQUE,
    product_id INT UNSIGNED,
    productids VARCHAR(255),
    productname VARCHAR(255),
    quantity INT UNSIGNED NOT NULL,
    optionin VARCHAR(255),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(50) NOT NULL DEFAULT _utf8mb4'배송 전' COLLATE utf8mb4_0900_ai_ci,
    guest_name VARCHAR(100) NOT NULL,
    guest_email VARCHAR(100) NOT NULL,
    guest_phone VARCHAR(20) NOT NULL,
    guest_address TEXT NOT NULL,
    CONSTRAINT fk_guest_purchase_product
      FOREIGN KEY (product_id) REFERENCES product(id)
      ON UPDATE CASCADE ON DELETE SET NULL,
    INDEX idx_guest_created (created_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

CREATE TABLE PaymentRecords (
    id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    order_number VARCHAR(255) NOT NULL,
    imp_uid VARCHAR(255),
    payment_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    price DECIMAL(10,2) NOT NULL,
    payment_method VARCHAR(50) NOT NULL DEFAULT 'UNKNOWN',
    payment_status VARCHAR(20) DEFAULT 'pending',
    UNIQUE KEY uk_payment_order (order_number),
    CONSTRAINT fk_payment_purchase
      FOREIGN KEY (order_number) REFERENCES PurchaseRecords(order_number)
      ON UPDATE CASCADE ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

CREATE TABLE IF NOT EXISTS seller_shipments (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  order_number   VARCHAR(255) NOT NULL,
  seller_id      VARCHAR(60)  NOT NULL,        -- order_items.seller_id
  receiver_name  VARCHAR(100) NOT NULL,        -- 회원: user.name / 비회원: guest_name
  phone          VARCHAR(30)  NULL,            -- 회원 전화 미보관이므로 NULL 가능
  address        TEXT         NOT NULL,        -- 회원: user.address / 비회원: guest_address
  total_quantity INT          NOT NULL,        -- 해당 판매자 품목 합계 수량
  total_amount   INT          NOT NULL,        -- 합계 금액
  payment_method VARCHAR(50)  NULL,            -- PaymentRecords.payment_method
  payment_status VARCHAR(20)  NULL,            -- PaymentRecords.payment_status
  status         VARCHAR(50)  NOT NULL DEFAULT '배송 전',  -- PurchaseRecords/GuestPurchaseRecords.status
  tracking_no    VARCHAR(60)  NULL,            -- 판매자 입력(선택)
  carrier        VARCHAR(40)  NULL,            -- 판매자 입력(선택)
  shipped_at     DATETIME     NULL,
  delivered_at   DATETIME     NULL,
  created_at     TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at     TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY uk_order_seller (order_number, seller_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- =========================
-- 기본/샘플 데이터 (한글은 _utf8mb4 리터럴 사용)
-- =========================

-- product 샘플
INSERT INTO product (writer, `name`, price, `description`, `count`, category, maker, color, size)
VALUES
    ('12',    _utf8mb4'제품 A', 10000, _utf8mb4'제품 A의 설명', 50, _utf8mb4'카테고리 A', _utf8mb4'제조사 X', 'Red',   'l'),
    ('user2', _utf8mb4'제품 B', 20000, _utf8mb4'제품 B의 설명', 30, _utf8mb4'카테고리 B', _utf8mb4'제조사 Y', 'Blue',  'm'),
    ('user3', _utf8mb4'제품 C', 15000, _utf8mb4'제품 C의 설명', 20, _utf8mb4'카테고리 A', _utf8mb4'제조사 Z', 'White', 's');

-- user 샘플 (BCrypt 해시 예시: "pass1234")
INSERT INTO `user` (userid, userpw, `name`, email, `class`, address)
VALUES
('user1', '$2a$10$P7Cq8TgZ2yE2m2k5q.x0iO2j1m3Z8a7YtTq2m1QqfPpQe0v1w5tpi', _utf8mb4'유저원', 'user1@example.com', 0, _utf8mb4'서울 강남구'),
('user2', '$2a$10$Jf3bqz1mC0VQm2xgJ2XcpebJ0y5l3m9o2q7HnYg0oX6c1Vb3mJ5Ta', _utf8mb4'유저투', 'user2@example.com', 0, _utf8mb4'부산 해운대구');

-- admin 샘플
INSERT INTO `admin` (adminid, adminpw, `name`, email, adminclass)
VALUES ('admin1', '$2a$10$8S3q4z6l9PpQe0v1w5tpiuOf2Xx7z6y3TtHpRzq2Qy1m0nBv9lZ9W', _utf8mb4'관리자일', 'admin1@example.com', 1);

-- review 샘플
INSERT INTO review (productid, writer, reviewtext, star)
VALUES
    (1, 'user1', _utf8mb4'제품 A 리뷰', 4.5),
    (2, 'user2', _utf8mb4'제품 B 리뷰', 3.5),
    (1, 'user3', _utf8mb4'제품 A 관련 추가 리뷰', 4.5);

-- cart 샘플
INSERT INTO cart (userid, productid, productname, color, size, `count`, price)
VALUES
    ('user1', 1, _utf8mb4'제품 A', 'Red',   'l', 2, 10000),
    ('user1', 2, _utf8mb4'제품 B', 'Blue',  'm', 1, 20000),
    ('user1', 3, _utf8mb4'제품 C', 'White', 's', 3, 15000),
    ('user1', 1, _utf8mb4'제품 A', 'Red',   'l', 1, 10000),
    ('user1', 3, _utf8mb4'제품 C', 'White', 's', 2, 15000);

-- =========================
-- 동작 확인용 주문/결제 테스트 데이터
-- =========================

-- (A) 회원 단건구매
INSERT INTO PurchaseRecords (order_number, userid, cartids, product_id, productids, productname, quantity, optionin, status)
VALUES
('1234-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'user1', NULL, 1, NULL, _utf8mb4'제품 A', 1, 'color=Red;size=l', _utf8mb4'배송 전');

INSERT INTO PaymentRecords (order_number, imp_uid, price, payment_method, payment_status)
VALUES ('1234-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'imp_0001', 10000.00, 'CARD', 'pending');

-- (B) 회원 장바구니구매
INSERT INTO PurchaseRecords (order_number, userid, cartids, product_id, productids, productname, quantity, optionin, status)
VALUES
('1234-bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'user1', '4,5', NULL, '1,3', _utf8mb4'제품 A 포함 2건', 3, 'color=Red/White;size=l/s', _utf8mb4'배송 전');

INSERT INTO PaymentRecords (order_number, imp_uid, price, payment_method, payment_status)
VALUES ('1234-bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', 'imp_0002', 40000.00, 'VBANK', 'completed');

-- (C) 비회원 단건구매
INSERT INTO GuestPurchaseRecords (order_number, product_id, productids, productname, quantity, optionin, status, guest_name, guest_email, guest_phone, guest_address)
VALUES
('12345-ccccccccccccccccccccccccccccccc', 2, NULL, _utf8mb4'제품 B', 1, 'color=Blue;size=m', _utf8mb4'배송 전', _utf8mb4'홍길동', 'guest1@example.com', '010-1111-2222', _utf8mb4'서울시 중구 어딘가');

INSERT INTO PaymentRecords (order_number, imp_uid, price, payment_method, payment_status)
VALUES ('12345-ccccccccccccccccccccccccccccccc', 'imp_0003', 20000.00, 'CARD', 'pending');

-- (D) 비회원 다건구매
INSERT INTO GuestPurchaseRecords (order_number, product_id, productids, productname, quantity, optionin, status, guest_name, guest_email, guest_phone, guest_address)
VALUES
('12345-ddddddddddddddddddddddddddddddd', NULL, '1,2,3', _utf8mb4'제품 A 포함 3건', 4, 'color=Mix;size=Mix', _utf8mb4'배송 전', _utf8mb4'임꺽정', 'guest2@example.com', '010-3333-4444', _utf8mb4'부산시 수영구 어디');

INSERT INTO PaymentRecords (order_number, imp_uid, price, payment_method, payment_status)
VALUES ('12345-ddddddddddddddddddddddddddddddd', 'imp_0004', 65000.00, 'CARD', 'completed');

-- (E) 결제 에러 케이스
INSERT INTO PurchaseRecords (order_number, userid, cartids, product_id, productids, productname, quantity, optionin, status)
VALUES
('1234-eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee', 'user2', NULL, 2, NULL, _utf8mb4'제품 B', 1, 'color=Blue;size=m', _utf8mb4'배송 전');

INSERT INTO PaymentRecords (order_number, imp_uid, price, payment_method, payment_status)
VALUES ('1234-eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee', 'imp_0005', 20000.00, 'CARD', 'error');







====

// E-commerce schema (DBML; no Indexes; user -> users)

// --------------------------
// Tables
// --------------------------

Table users {
  id int [pk, note: 'INT UNSIGNED AUTO_INCREMENT']
  regDate datetime [not null, default: `CURRENT_TIMESTAMP`]
  userid varchar(60) [not null, unique]
  userpw varchar(255) [note: 'NULL 허용했으나 실무에선 NOT NULL 권장']
  name varchar(60) [not null]
  email varchar(60) [not null, unique]
  class int [not null]
  address varchar(60)
}

Table admin {
  id int [pk, note: 'INT UNSIGNED AUTO_INCREMENT']
  regDate datetime [not null, default: `CURRENT_TIMESTAMP`]
  adminid varchar(60) [not null, unique]
  adminpw varchar(255) [not null]
  name varchar(60) [not null]
  email varchar(60) [not null, unique]
  adminclass int [not null]
}

Table product {
  id int [pk, note: 'INT UNSIGNED AUTO_INCREMENT']
  writer varchar(60) [not null, note: '표시용 문자열 ID(선택적으로 FK 가능)']
  name varchar(255) [not null]
  price int [not null]
  description varchar(255) [not null]
  imageUrl varchar(255)
  count int [not null]
  category varchar(255) [not null]
  maker varchar(255) [not null]
  color varchar(255) [not null]
  size varchar(255) [not null]
  additionalOptions varchar(255)
  regDate datetime [not null, default: `CURRENT_TIMESTAMP`]
  viewcount int [not null, default: 0, note: 'UNSIGNED']
}

Table article {
  id int [pk, note: 'INT UNSIGNED AUTO_INCREMENT']
  title varchar(255) [not null]
  body text [not null]
  writer_id varchar(60) [not null, note: 'users.userid 참조']
  reg_date datetime [not null, default: `CURRENT_TIMESTAMP`]
  update_date datetime [not null, default: `CURRENT_TIMESTAMP`]
  viewcount int [not null, default: 0, note: 'UNSIGNED']
}

Table review {
  id int [pk, note: 'INT UNSIGNED AUTO_INCREMENT']
  productid int [not null]
  writer varchar(60) [not null, note: 'users.userid 저장 권장']
  regDate datetime [not null, default: `CURRENT_TIMESTAMP`]
  reviewtext text [not null]
  star double [not null, note: 'UNSIGNED']
}

Table cart {
  id int [pk, note: 'INT UNSIGNED AUTO_INCREMENT']
  userid varchar(60) [not null]
  productid int [not null]
  productname varchar(255) [not null]
  color varchar(255) [not null]
  size varchar(255) [not null]
  count int [not null]
  price int [not null]
  priceall int [note: 'Generated: price * count (STORED)']
}

Table PurchaseRecords {
  id int [pk, note: 'INT UNSIGNED AUTO_INCREMENT']
  order_number varchar(255) [not null, unique]
  userid varchar(60) [note: '회원 주문 시 users.userid']
  cartids varchar(255) [note: '장바구니 id CSV']
  product_id int [note: '단건구매 product.id']
  productids varchar(255) [note: '다건 구매 id CSV']
  productname varchar(255)
  quantity int [not null]
  optionin varchar(255)
  created_at timestamp [not null, default: `CURRENT_TIMESTAMP`]
  status varchar(50) [not null, default: '배송 전']
}

Table GuestPurchaseRecords {
  id int [pk, note: 'INT UNSIGNED AUTO_INCREMENT']
  order_number varchar(255) [not null, unique]
  product_id int
  productids varchar(255)
  productname varchar(255)
  quantity int [not null]
  optionin varchar(255)
  created_at timestamp [not null, default: `CURRENT_TIMESTAMP`]
  status varchar(50) [not null, default: '배송 전']
  guest_name varchar(100) [not null]
  guest_email varchar(100) [not null]
  guest_phone varchar(20) [not null]
  guest_address text [not null]
}

Table PaymentRecords {
  id int [pk, note: 'INT UNSIGNED AUTO_INCREMENT']
  order_number varchar(255) [not null]
  imp_uid varchar(255)
  payment_date timestamp [not null, default: `CURRENT_TIMESTAMP`]
  price decimal(10,2) [not null]
  payment_method varchar(50) [not null, default: 'UNKNOWN']
  payment_status varchar(20) [default: 'pending']
}

// --------------------------
// References (child > parent)
// --------------------------

// article.writer_id -> users.userid
Ref: article.writer_id > users.userid [update: cascade, delete: no action]

// review.productid -> product.id
Ref: review.productid > product.id [update: cascade, delete: cascade]

// cart.userid -> users.userid
Ref: cart.userid > users.userid [update: cascade, delete: cascade]

// cart.productid -> product.id
Ref: cart.productid > product.id [update: cascade, delete: cascade]

// PurchaseRecords.userid -> users.userid
Ref: PurchaseRecords.userid > users.userid [update: cascade, delete: set null]

// PurchaseRecords.product_id -> product.id
Ref: PurchaseRecords.product_id > product.id [update: cascade, delete: set null]

// GuestPurchaseRecords.product_id -> product.id
Ref: GuestPurchaseRecords.product_id > product.id [update: cascade, delete: set null]

// PaymentRecords.order_number -> PurchaseRecords.order_number
Ref: PaymentRecords.order_number > PurchaseRecords.order_number [update: cascade, delete: cascade]
